{"version":3,"file":"component---src-pages-blog-js-9dd6ac1f6f3c3402b942.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/styles/blog.module.css","webpack://gatsby-starter-blog/./src/components/blog/category.js","webpack://gatsby-starter-blog/./src/pages/blog.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"flex flex-col gap-1 items-start\">\n      <StaticImage\n        className=\"rounded-full border-2 border-gray-400\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/yunjiLee.jpeg\"\n        width={60}\n        height={60}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <>\n          {\" \"}\n          <p className=\"text-md\">\n            by <strong>{author.name}</strong>\n          </p>\n          {/* <p>{author?.summary || null}</p>\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>isy'sblog</a> */}\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","// extracted by mini-css-extract-plugin\nexport var blog = \"blog-module--blog--9685d\";\nexport var category = \"blog-module--category--95004\";","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nconst Category = ({ data, onChangeCat }) => {\n  const group = data.allMarkdownRemark.group\n  // const handleClick = category => {\n  //   console.log(category)\n  //   onChangeCat(category)\n  // }\n\n  // const posts = data.allMarkdownRemark.nodes\n\n  return (\n    <div className=\"flex flex-col gap-2 \">\n      <h3 className=\"font-semibold text-gray-700\">Category</h3>\n      <div className=\"text-md text-gray-600 flex flex-col items-start\t\">\n        <button\n          key={\"All\"}\n          className=\"text-lg hover:bg-slate-300 hover:text-gray-800 w-full text-start p-1\"\n          onClick={() => onChangeCat(\"All\")}\n        >\n          🫧 All\n        </button>\n        {group.map(prop => {\n          const { fieldValue } = prop\n          return (\n            <button\n              key={fieldValue}\n              className=\" text-lg hover:bg-slate-300 hover:text-gray-800 w-full text-start p-1\"\n              onClick={() => onChangeCat(fieldValue)}\n            >\n              🫧 {fieldValue}\n            </button>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default Category\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n        }\n      }\n      group(field: { frontmatter: { category: SELECT } }) {\n        edges {\n          node {\n            id\n          }\n        }\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/seo\"\nimport * as styles from \"../styles/blog.module.css\"\nimport Category from \"../components/blog/category\"\nimport { useState } from \"react\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const [filteredCat, setFilteredCat] = useState(\"All\")\n\n  const filterCatHandler = selected => {\n    setFilteredCat(selected)\n  }\n\n  console.log(filteredCat + \"!!!\")\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>등록된 포스트가 없습니다.</p>\n      </Layout>\n    )\n  }\n  if (filteredCat === \"All\") {\n    return (\n      <Layout>\n        <div className=\"pt-10 \">\n          <div className=\"relative flex flex-row gap-2 \">\n            <div className={`${styles.category} flex flex-col`}>\n              <Bio />\n              <div className=\"border-b border-gray-400 w-full my-1\"></div>\n\n              <Category data={data} onChangeCat={filterCatHandler}></Category>\n            </div>\n            <ol className={`${styles.blog} flex-1`}>\n              {posts.map(post => {\n                const title = post.frontmatter.title || post.fields.slug\n\n                return (\n                  <li className=\"w-full flex flex-row\" key={post.fields.slug}>\n                    <div className=\"card-container w-full transition ease-in-out delay-100 hover:-translate-y-2  duration-200\">\n                      <img\n                        src={post.frontmatter.image}\n                        className=\"w-40\"\n                        alt=\"\"\n                      />\n\n                      <article\n                        className=\"flex-1 post-list-item card mb-3 \"\n                        itemScope\n                        itemType=\"http://schema.org/Article\"\n                      >\n                        <header className=\"card-header px-3 py-2\">\n                          <h2>\n                            <Link to={post.fields.slug} itemProp=\"url\">\n                              <span itemProp=\"headline\">{title}</span>\n                            </Link>\n                          </h2>\n                          <small>{post.frontmatter.date}</small>\n                        </header>\n                        <section className=\"card-body px-3 py-2\">\n                          <p\n                            dangerouslySetInnerHTML={{\n                              __html:\n                                post.frontmatter.description || post.excerpt,\n                            }}\n                            itemProp=\"description\"\n                          />\n                        </section>\n                      </article>\n                    </div>\n                  </li>\n                )\n              })}\n            </ol>\n          </div>\n        </div>\n      </Layout>\n    )\n  } else {\n    const filterExpenses = posts.filter(post => {\n      return post.frontmatter.category === filteredCat\n    })\n    console.log(filteredCat)\n    console.log(filterExpenses)\n    return (\n      <Layout>\n        <div className=\"pt-10\">\n          <div className=\"relative flex flex-row gap-2 \">\n            <div className={`${styles.category} flex flex-col`}>\n              <Bio />\n              <div className=\"border-b border-gray-400 w-full my-1\"></div>\n\n              <Category data={data} onChangeCat={filterCatHandler}></Category>\n            </div>\n            <ol className={`${styles.blog} flex-1`}>\n              {filterExpenses.map(post => {\n                const title = post.frontmatter.title || post.fields.slug\n\n                return (\n                  <li className=\"w-full flex flex-row\" key={post.fields.slug}>\n                    <div className=\"card-container w-full transition ease-in-out delay-100 hover:-translate-y-2  duration-200\">\n                      <img\n                        src={post.frontmatter.image}\n                        className=\"w-40\"\n                        alt=\"\"\n                      />\n                      <article\n                        className=\"flex-1 post-list-item card mb-3 \"\n                        itemScope\n                        itemType=\"http://schema.org/Article\"\n                      >\n                        <header className=\"card-header px-3 py-2\">\n                          <h2>\n                            <Link to={post.fields.slug} itemProp=\"url\">\n                              <span itemProp=\"headline\">{title}</span>\n                            </Link>\n                          </h2>\n                          <small>{post.frontmatter.date}</small>\n                        </header>\n                        <section className=\"card-body px-3 py-2\">\n                          <p\n                            dangerouslySetInnerHTML={{\n                              __html:\n                                post.frontmatter.description || post.excerpt,\n                            }}\n                            itemProp=\"description\"\n                          />\n                        </section>\n                      </article>\n                    </div>\n                  </li>\n                )\n              })}\n            </ol>\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          category\n          image\n        }\n      }\n      group(field: { frontmatter: { category: SELECT } }) {\n        edges {\n          node {\n            id\n          }\n        }\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","description","title","children","metaDescription","defaultTitle","content","property","twitter","blog","category","onChangeCat","group","allMarkdownRemark","key","onClick","map","prop","fieldValue","location","siteTitle","posts","nodes","filteredCat","setFilteredCat","useState","filterCatHandler","selected","console","log","length","Layout","styles","post","frontmatter","fields","slug","image","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","filterExpenses","filter","Head"],"sourceRoot":""}