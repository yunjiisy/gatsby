{"version":3,"file":"component---src-templates-blog-post-js-9827086bba1291d4a185.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/TableOfContents.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js","webpack://gatsby-starter-blog/./src/styles/post.module.css"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/yunjiLee.jpeg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React from \"react\"\n\nconst TableOfContents = ({ toc }) => {\n  return (\n    <div\n      // 스타일링을 위해서 클래스이름 부여 한다.\n      className=\"table-of-content sticky top-4 align-center\"\n      dangerouslySetInnerHTML={{ __html: toc }}\n    />\n  )\n}\n\nexport default TableOfContents\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport TableOfContents from \"../components/TableOfContents\"\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/Layout\"\nimport Seo from \"../components/seo\"\nimport * as styles from \"../styles/post.module.css\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n  console.log(post.html)\n  console.log(\"wowㄴㄴㄴㄴㄴㄴㄴㄴ\")\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className={styles.post}>\n        <article className=\"blog-post\" itemScope>\n          <header>\n            <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n            <p>{post.frontmatter.date}</p>\n          </header>\n          <div className=\"post-container flex \">\n            <div\n              className=\"post-content w-3/4\"\n              dangerouslySetInnerHTML={{ __html: post.html }}\n            />\n            <div className=\"post-toc w-1/4 pl-7 ml-3 bg-gray-100 rounded-lg border-dotted border-2 border-indigo-600\">\n              <div className=\"mb-1 mt-2\">목차</div>\n              <TableOfContents toc={post.tableOfContents} />\n            </div>\n          </div>\n          <hr />\n          <footer>{/* <Bio /> */}</footer>\n        </article>\n        <nav className=\"blog-post-nav\">\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `space-between`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={previous.fields.slug} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields.slug} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nexport var post = \"post-module--post--dcbb5\";"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","description","title","children","metaDescription","defaultTitle","content","property","toc","dangerouslySetInnerHTML","__html","Head","markdownRemark","post","frontmatter","excerpt","previous","next","location","siteTitle","console","log","html","Layout","itemScope","itemProp","date","tableOfContents","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}